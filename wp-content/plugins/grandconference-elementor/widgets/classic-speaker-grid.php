<?phpnamespace GrandConferenceElementor\Widgets;use Elementor\Widget_Base;use Elementor\Controls_Manager;if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly/** * Elementor Portfolio Classic * * Elementor widget for portfolio posts * * @since 1.0.0 */class GrandConference_Classic_Speaker_Grid extends Widget_Base {	/**	 * Retrieve the widget name.	 *	 * @since 1.0.0	 *	 * @access public	 *	 * @return string Widget name.	 */	public function get_name() {		return 'grandconference-classic-speaker-grid';	}	/**	 * Retrieve the widget title.	 *	 * @since 1.0.0	 *	 * @access public	 *	 * @return string Widget title.	 */	public function get_title() {		return __( 'Classic Speaker Grid', 'grandconference-elementor' );	}	/**	 * Retrieve the widget icon.	 *	 * @since 1.0.0	 *	 * @access public	 *	 * @return string Widget icon.	 */	public function get_icon() {		return 'eicon-gallery-grid';	}	/**	 * Retrieve the list of categories the widget belongs to.	 *	 * Used to determine where to display the widget in the editor.	 *	 * Note that currently Elementor supports only one category.	 * When multiple categories passed, Elementor uses the first one.	 *	 * @since 1.0.0	 *	 * @access public	 *	 * @return array Widget categories.	 */	public function get_categories() {		return [ 'grandconference-theme-classic-widgets-category' ];	}	/**	 * Retrieve the list of scripts the widget depended on.	 *	 * Used to set scripts dependencies required to run the widget.	 *	 * @since 1.0.0	 *	 * @access public	 *	 * @return array Widget scripts dependencies.	 */	public function get_script_depends() {		return array();	}	/**	 * Register the widget controls.	 *	 * Adds different input fields to allow the user to change and customize the widget settings.	 *	 * @since 1.0.0	 *	 * @access protected	 */	protected function register_controls() {		$this->start_controls_section(			'section_content',			[				'label' => __( 'Content', 'grandconference-elementor' ),			]		);				$this->add_control(			'columns',			[				'label' => __( 'Columns', 'grandconference-elementor' ),				'type' => Controls_Manager::SLIDER,				'default' => [					'size' => 3,				],				'range' => [					'px' => [						'min' => 2,						'max' => 5,						'step' => 1,					]				],			]		);				$this->add_control(			'speakercat',			[				'label' => __( 'Filter by category', 'grandconference-elementor' ),				'type' => Controls_Manager::SELECT2,				'options' => grandconference_get_speaker_cat(),				'multiple' => false,			]		);				$this->add_control(			'items',			[				'label' => __( 'Items', 'grandconference-elementor' ),				'type' => Controls_Manager::SLIDER,				'default' => [					'size' => 10,				],				'range' => [					'px' => [						'min' => 1,						'max' => 500,						'step' => 1,					]				],			]		);				$this->add_control(			'effect',			[				'label' => __( 'Thumbnail Effect', 'grandconference-elementor' ),				'type' => Controls_Manager::SELECT,				'options' => array(					0 => __( 'No Effect', 'grandconference-elementor' ),					'bw' => __( 'Black & White', 'grandconference-elementor' ),				),				'default' => 0,				'multiple' => false,			]		);				$this->end_controls_section();				$this->start_controls_section(			'section_name_style',			array(				'label'      => esc_html__( 'Name', 'grandconference-elementor' ),				'tab'        => Controls_Manager::TAB_STYLE,				'show_label' => false,			)		);				$this->add_group_control(				\Elementor\Group_Control_Typography::get_type(),				[					'name' => 'name_typography',					'label' => __( 'Name Typography', 'grandconference-elementor' ),					'selector' => '{{WRAPPER}} .speaker-grid-wrapper .ppb_speaker_grid .speaker_info_wrapper h4',				]			);				$this->add_control(			'name_color',			[				'label' => __( 'Name Color', 'grandconference-elementor' ),				'type' => Controls_Manager::COLOR,				'default' => '#FF2D55',				'selectors' => [					'{{WRAPPER}} .speaker-grid-wrapper .ppb_speaker_grid .speaker_info_wrapper h4' => 'color: {{VALUE}}',				],			]		);				$this->add_group_control(			\Elementor\Group_Control_Background::get_type(),			[				'name' => 'background_overlay',				'label' => __( 'Background Overlay', 'grandconference-elementor' ),				'types' => [ 'classic', 'gradient' ],				'selector' => '{{WRAPPER}} .speaker-grid-wrapper .ppb_speaker_grid .element:after, {{WRAPPER}} .speaker-grid-wrapper .ppb_speaker_grid .element > a:after',			]		);				$this->end_controls_section();						$this->start_controls_section(			'section_position_style',			array(				'label'      => esc_html__( 'Position', 'grandconference-elementor' ),				'tab'        => Controls_Manager::TAB_STYLE,				'show_label' => false,			)		);				$this->add_group_control(			\Elementor\Group_Control_Typography::get_type(),			[				'name' => 'position_typography',				'label' => __( 'Position Typography', 'grandconference-elementor' ),				'selector' => '{{WRAPPER}} .speaker-grid-wrapper .ppb_speaker_grid .speaker_info_wrapper .speaker_desc',			]		);				$this->add_control(			'position_color',			[				'label' => __( 'Position Color', 'grandconference-elementor' ),				'type' => Controls_Manager::COLOR,				'default' => '#ffffff',				'selectors' => [					'{{WRAPPER}} .speaker-grid-wrapper .ppb_speaker_grid .speaker_info_wrapper .speaker_desc' => 'color: {{VALUE}}',				],			]		);				$this->end_controls_section();	}	/**	 * Render the widget output on the frontend.	 *	 * Written in PHP and used to generate the final HTML.	 *	 * @since 1.0.0	 *	 * @access protected	 */	protected function render() {		include(GRANDCONFERENCE_ELEMENTOR_PATH.'templates/classic-speaker-grid/index.php');	}	/**	 * Render the widget output in the editor.	 *	 * Written as a Backbone JavaScript template and used to generate the live preview.	 *	 * @since 1.0.0	 *	 * @access protected	 */	protected function content_template() {		return '';	}}